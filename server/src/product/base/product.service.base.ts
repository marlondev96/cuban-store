/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Product as PrismaProduct,
  Review as PrismaReview,
  Category as PrismaCategory,
  DiscountCuppon as PrismaDiscountCuppon,
  Order as PrismaOrder,
  Subcategory as PrismaSubcategory,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class ProductServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.ProductCountArgs, "select">): Promise<number> {
    return this.prisma.product.count(args);
  }

  async products(args: Prisma.ProductFindManyArgs): Promise<PrismaProduct[]> {
    return this.prisma.product.findMany(args);
  }
  async product(
    args: Prisma.ProductFindUniqueArgs
  ): Promise<PrismaProduct | null> {
    return this.prisma.product.findUnique(args);
  }
  async createProduct(args: Prisma.ProductCreateArgs): Promise<PrismaProduct> {
    return this.prisma.product.create(args);
  }
  async updateProduct(args: Prisma.ProductUpdateArgs): Promise<PrismaProduct> {
    return this.prisma.product.update(args);
  }
  async deleteProduct(args: Prisma.ProductDeleteArgs): Promise<PrismaProduct> {
    return this.prisma.product.delete(args);
  }

  async uploadImage1<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaProduct> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "/products";
    const image1 = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.product.update({
      where: args.where,

      data: {
        image1: image1 as InputJsonValue,
      },
    });
  }

  async downloadImage1<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>
  ): Promise<FileDownload> {
    const { image1 } = await this.prisma.product.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      image1 as unknown as LocalStorageFile
    );
  }

  async deleteImage1<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>
  ): Promise<PrismaProduct> {
    const { image1 } = await this.prisma.product.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      image1 as unknown as LocalStorageFile
    );

    return await this.prisma.product.update({
      where: args.where,

      data: {
        image1: Prisma.DbNull,
      },
    });
  }

  async uploadImage2<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaProduct> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "/products";
    const image2 = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.product.update({
      where: args.where,

      data: {
        image2: image2 as InputJsonValue,
      },
    });
  }

  async downloadImage2<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>
  ): Promise<FileDownload> {
    const { image2 } = await this.prisma.product.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      image2 as unknown as LocalStorageFile
    );
  }

  async deleteImage2<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>
  ): Promise<PrismaProduct> {
    const { image2 } = await this.prisma.product.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      image2 as unknown as LocalStorageFile
    );

    return await this.prisma.product.update({
      where: args.where,

      data: {
        image2: Prisma.DbNull,
      },
    });
  }

  async uploadImage3<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaProduct> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "/products";
    const image3 = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.product.update({
      where: args.where,

      data: {
        image3: image3 as InputJsonValue,
      },
    });
  }

  async downloadImage3<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>
  ): Promise<FileDownload> {
    const { image3 } = await this.prisma.product.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      image3 as unknown as LocalStorageFile
    );
  }

  async deleteImage3<T extends Prisma.ProductFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>
  ): Promise<PrismaProduct> {
    const { image3 } = await this.prisma.product.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      image3 as unknown as LocalStorageFile
    );

    return await this.prisma.product.update({
      where: args.where,

      data: {
        image3: Prisma.DbNull,
      },
    });
  }

  async findReviews(
    parentId: string,
    args: Prisma.ReviewFindManyArgs
  ): Promise<PrismaReview[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }

  async getDiscountCuppon(
    parentId: string
  ): Promise<PrismaDiscountCuppon | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .discountCuppon();
  }

  async getOrder(parentId: string): Promise<PrismaOrder | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .order();
  }

  async getSubcategory(parentId: string): Promise<PrismaSubcategory | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .subcategory();
  }
}
