/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DiscountCuppon } from "./DiscountCuppon";
import { DiscountCupponCountArgs } from "./DiscountCupponCountArgs";
import { DiscountCupponFindManyArgs } from "./DiscountCupponFindManyArgs";
import { DiscountCupponFindUniqueArgs } from "./DiscountCupponFindUniqueArgs";
import { CreateDiscountCupponArgs } from "./CreateDiscountCupponArgs";
import { UpdateDiscountCupponArgs } from "./UpdateDiscountCupponArgs";
import { DeleteDiscountCupponArgs } from "./DeleteDiscountCupponArgs";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { DiscountCupponService } from "../discountCuppon.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DiscountCuppon)
export class DiscountCupponResolverBase {
  constructor(
    protected readonly service: DiscountCupponService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "read",
    possession: "any",
  })
  async _discountCupponsMeta(
    @graphql.Args() args: DiscountCupponCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DiscountCuppon])
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "read",
    possession: "any",
  })
  async discountCuppons(
    @graphql.Args() args: DiscountCupponFindManyArgs
  ): Promise<DiscountCuppon[]> {
    return this.service.discountCuppons(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DiscountCuppon, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "read",
    possession: "own",
  })
  async discountCuppon(
    @graphql.Args() args: DiscountCupponFindUniqueArgs
  ): Promise<DiscountCuppon | null> {
    const result = await this.service.discountCuppon(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DiscountCuppon)
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "create",
    possession: "any",
  })
  async createDiscountCuppon(
    @graphql.Args() args: CreateDiscountCupponArgs
  ): Promise<DiscountCuppon> {
    return await this.service.createDiscountCuppon({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DiscountCuppon)
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "update",
    possession: "any",
  })
  async updateDiscountCuppon(
    @graphql.Args() args: UpdateDiscountCupponArgs
  ): Promise<DiscountCuppon | null> {
    try {
      return await this.service.updateDiscountCuppon({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DiscountCuppon)
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "delete",
    possession: "any",
  })
  async deleteDiscountCuppon(
    @graphql.Args() args: DeleteDiscountCupponArgs
  ): Promise<DiscountCuppon | null> {
    try {
      return await this.service.deleteDiscountCuppon(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Product], { name: "products" })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async findProducts(
    @graphql.Parent() parent: DiscountCuppon,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProducts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
