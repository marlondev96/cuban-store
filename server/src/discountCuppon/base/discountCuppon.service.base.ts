/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DiscountCuppon as PrismaDiscountCuppon,
  Product as PrismaProduct,
} from "@prisma/client";

export class DiscountCupponServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DiscountCupponCountArgs, "select">
  ): Promise<number> {
    return this.prisma.discountCuppon.count(args);
  }

  async discountCuppons(
    args: Prisma.DiscountCupponFindManyArgs
  ): Promise<PrismaDiscountCuppon[]> {
    return this.prisma.discountCuppon.findMany(args);
  }
  async discountCuppon(
    args: Prisma.DiscountCupponFindUniqueArgs
  ): Promise<PrismaDiscountCuppon | null> {
    return this.prisma.discountCuppon.findUnique(args);
  }
  async createDiscountCuppon(
    args: Prisma.DiscountCupponCreateArgs
  ): Promise<PrismaDiscountCuppon> {
    return this.prisma.discountCuppon.create(args);
  }
  async updateDiscountCuppon(
    args: Prisma.DiscountCupponUpdateArgs
  ): Promise<PrismaDiscountCuppon> {
    return this.prisma.discountCuppon.update(args);
  }
  async deleteDiscountCuppon(
    args: Prisma.DiscountCupponDeleteArgs
  ): Promise<PrismaDiscountCuppon> {
    return this.prisma.discountCuppon.delete(args);
  }

  async findProducts(
    parentId: string,
    args: Prisma.ProductFindManyArgs
  ): Promise<PrismaProduct[]> {
    return this.prisma.discountCuppon
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .products(args);
  }
}
