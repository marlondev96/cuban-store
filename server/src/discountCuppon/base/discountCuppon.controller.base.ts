/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DiscountCupponService } from "../discountCuppon.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DiscountCupponCreateInput } from "./DiscountCupponCreateInput";
import { DiscountCuppon } from "./DiscountCuppon";
import { DiscountCupponFindManyArgs } from "./DiscountCupponFindManyArgs";
import { DiscountCupponWhereUniqueInput } from "./DiscountCupponWhereUniqueInput";
import { DiscountCupponUpdateInput } from "./DiscountCupponUpdateInput";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ProductWhereUniqueInput } from "../../product/base/ProductWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DiscountCupponControllerBase {
  constructor(
    protected readonly service: DiscountCupponService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DiscountCuppon })
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: DiscountCupponCreateInput,
  })
  async createDiscountCuppon(
    @common.Body() data: DiscountCupponCreateInput
  ): Promise<DiscountCuppon> {
    return await this.service.createDiscountCuppon({
      data: data,
      select: {
        createdAt: true,
        dateEnd: true,
        dateStart: true,
        discountByCantity: true,
        id: true,
        percentDiscount: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [DiscountCuppon] })
  @ApiNestedQuery(DiscountCupponFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async discountCuppons(
    @common.Req() request: Request
  ): Promise<DiscountCuppon[]> {
    const args = plainToClass(DiscountCupponFindManyArgs, request.query);
    return this.service.discountCuppons({
      ...args,
      select: {
        createdAt: true,
        dateEnd: true,
        dateStart: true,
        discountByCantity: true,
        id: true,
        percentDiscount: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DiscountCuppon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async discountCuppon(
    @common.Param() params: DiscountCupponWhereUniqueInput
  ): Promise<DiscountCuppon | null> {
    const result = await this.service.discountCuppon({
      where: params,
      select: {
        createdAt: true,
        dateEnd: true,
        dateStart: true,
        discountByCantity: true,
        id: true,
        percentDiscount: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DiscountCuppon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: DiscountCupponUpdateInput,
  })
  async updateDiscountCuppon(
    @common.Param() params: DiscountCupponWhereUniqueInput,
    @common.Body() data: DiscountCupponUpdateInput
  ): Promise<DiscountCuppon | null> {
    try {
      return await this.service.updateDiscountCuppon({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dateEnd: true,
          dateStart: true,
          discountByCantity: true,
          id: true,
          percentDiscount: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DiscountCuppon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDiscountCuppon(
    @common.Param() params: DiscountCupponWhereUniqueInput
  ): Promise<DiscountCuppon | null> {
    try {
      return await this.service.deleteDiscountCuppon({
        where: params,
        select: {
          createdAt: true,
          dateEnd: true,
          dateStart: true,
          discountByCantity: true,
          id: true,
          percentDiscount: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/products")
  @ApiNestedQuery(ProductFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async findProducts(
    @common.Req() request: Request,
    @common.Param() params: DiscountCupponWhereUniqueInput
  ): Promise<Product[]> {
    const query = plainToClass(ProductFindManyArgs, request.query);
    const results = await this.service.findProducts(params.id, {
      ...query,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        colors: true,
        createdAt: true,
        description: true,

        discountCuppon: {
          select: {
            id: true,
          },
        },

        discountPrice: true,
        id: true,
        image1: true,
        image2: true,
        image3: true,
        images: true,

        order: {
          select: {
            id: true,
          },
        },

        subcategory: {
          select: {
            id: true,
          },
        },

        title: true,
        titlePrice: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/products")
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "update",
    possession: "any",
  })
  async connectProducts(
    @common.Param() params: DiscountCupponWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        connect: body,
      },
    };
    await this.service.updateDiscountCuppon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/products")
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "update",
    possession: "any",
  })
  async updateProducts(
    @common.Param() params: DiscountCupponWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        set: body,
      },
    };
    await this.service.updateDiscountCuppon({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/products")
  @nestAccessControl.UseRoles({
    resource: "DiscountCuppon",
    action: "update",
    possession: "any",
  })
  async disconnectProducts(
    @common.Param() params: DiscountCupponWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        disconnect: body,
      },
    };
    await this.service.updateDiscountCuppon({
      where: params,
      data,
      select: { id: true },
    });
  }
}
