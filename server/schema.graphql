# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BooleanNullableFilter {
  equals: Boolean
  not: Boolean
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  deletePhoto(where: UserWhereUniqueInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  uploadPhoto(file: Upload!, where: UserWhereUniqueInput!): User!
}

type Query {
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  createdAt: DateTime!
  email: String
  firstName: String
  id: String!
  isAdmin: Boolean
  lastName: String
  photo: JSON
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  email: String
  firstName: String
  isAdmin: Boolean
  lastName: String
  password: String!
  photo: JSON
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  lastName: SortOrder
  password: SortOrder
  photo: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  email: String
  firstName: String
  isAdmin: Boolean
  lastName: String
  password: String
  photo: JSON
  roles: JSON
  username: String
}

input UserWhereInput {
  email: StringNullableFilter
  firstName: StringNullableFilter
  id: StringFilter
  isAdmin: BooleanNullableFilter
  lastName: StringNullableFilter
  photo: JsonFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}